'------------------------------------------------------------------------------
' <auto-generated>
'     Dieser Code wurde von einem Tool generiert.
'     Laufzeitversion:4.0.30319.18408
'
'     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
'     der Code erneut generiert wird.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="DBArtikel")>  _
Partial Public Class DBArtikelORMDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definitionen der Erweiterungsmethoden"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertArtikel(instance As Artikel)
    End Sub
  Partial Private Sub UpdateArtikel(instance As Artikel)
    End Sub
  Partial Private Sub DeleteArtikel(instance As Artikel)
    End Sub
  Partial Private Sub InsertLieferanten(instance As Lieferanten)
    End Sub
  Partial Private Sub UpdateLieferanten(instance As Lieferanten)
    End Sub
  Partial Private Sub DeleteLieferanten(instance As Lieferanten)
    End Sub
  Partial Private Sub InsertProdukte(instance As Produkte)
    End Sub
  Partial Private Sub UpdateProdukte(instance As Produkte)
    End Sub
  Partial Private Sub DeleteProdukte(instance As Produkte)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.VB.WinForm.DBClient.LinqToSql.My.MySettings.Default.DBArtikelConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Artikel() As System.Data.Linq.Table(Of Artikel)
		Get
			Return Me.GetTable(Of Artikel)
		End Get
	End Property
	
	Public ReadOnly Property Lieferanten() As System.Data.Linq.Table(Of Lieferanten)
		Get
			Return Me.GetTable(Of Lieferanten)
		End Get
	End Property
	
	Public ReadOnly Property Produkte() As System.Data.Linq.Table(Of Produkte)
		Get
			Return Me.GetTable(Of Produkte)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Artikel")>  _
Partial Public Class Artikel
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _artnr As Integer
	
	Private _lfnr As Integer
	
	Private _pnr As Integer
	
	Private _vorrat As System.Nullable(Of Integer)
	
	Private _preis As System.Nullable(Of Decimal)
	
	Private _Lieferanten As EntityRef(Of Lieferanten)
	
	Private _Produkte As EntityRef(Of Produkte)
	
    #Region "Definitionen der Erweiterungsmethoden"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnartnrChanging(value As Integer)
    End Sub
    Partial Private Sub OnartnrChanged()
    End Sub
    Partial Private Sub OnlfnrChanging(value As Integer)
    End Sub
    Partial Private Sub OnlfnrChanged()
    End Sub
    Partial Private Sub OnpnrChanging(value As Integer)
    End Sub
    Partial Private Sub OnpnrChanged()
    End Sub
    Partial Private Sub OnvorratChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnvorratChanged()
    End Sub
    Partial Private Sub OnpreisChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpreisChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Lieferanten = CType(Nothing, EntityRef(Of Lieferanten))
		Me._Produkte = CType(Nothing, EntityRef(Of Produkte))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_artnr", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property artnr() As Integer
		Get
			Return Me._artnr
		End Get
		Set
			If ((Me._artnr = value)  _
						= false) Then
				Me.OnartnrChanging(value)
				Me.SendPropertyChanging
				Me._artnr = value
				Me.SendPropertyChanged("artnr")
				Me.OnartnrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lfnr", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property lfnr() As Integer
		Get
			Return Me._lfnr
		End Get
		Set
			If ((Me._lfnr = value)  _
						= false) Then
				If Me._Lieferanten.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnlfnrChanging(value)
				Me.SendPropertyChanging
				Me._lfnr = value
				Me.SendPropertyChanged("lfnr")
				Me.OnlfnrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pnr", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property pnr() As Integer
		Get
			Return Me._pnr
		End Get
		Set
			If ((Me._pnr = value)  _
						= false) Then
				If Me._Produkte.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpnrChanging(value)
				Me.SendPropertyChanging
				Me._pnr = value
				Me.SendPropertyChanged("pnr")
				Me.OnpnrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vorrat", DbType:="Int")>  _
	Public Property vorrat() As System.Nullable(Of Integer)
		Get
			Return Me._vorrat
		End Get
		Set
			If (Me._vorrat.Equals(value) = false) Then
				Me.OnvorratChanging(value)
				Me.SendPropertyChanging
				Me._vorrat = value
				Me.SendPropertyChanged("vorrat")
				Me.OnvorratChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_preis", DbType:="Money")>  _
	Public Property preis() As System.Nullable(Of Decimal)
		Get
			Return Me._preis
		End Get
		Set
			If (Me._preis.Equals(value) = false) Then
				Me.OnpreisChanging(value)
				Me.SendPropertyChanging
				Me._preis = value
				Me.SendPropertyChanged("preis")
				Me.OnpreisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Lieferanten_Artikel", Storage:="_Lieferanten", ThisKey:="lfnr", OtherKey:="lfnr", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Lieferanten() As Lieferanten
		Get
			Return Me._Lieferanten.Entity
		End Get
		Set
			Dim previousValue As Lieferanten = Me._Lieferanten.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Lieferanten.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Lieferanten.Entity = Nothing
					previousValue.Artikel.Remove(Me)
				End If
				Me._Lieferanten.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Artikel.Add(Me)
					Me._lfnr = value.lfnr
				Else
					Me._lfnr = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Lieferanten")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Produkte_Artikel", Storage:="_Produkte", ThisKey:="pnr", OtherKey:="pnr", IsForeignKey:=true)>  _
	Public Property Produkte() As Produkte
		Get
			Return Me._Produkte.Entity
		End Get
		Set
			Dim previousValue As Produkte = Me._Produkte.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Produkte.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Produkte.Entity = Nothing
					previousValue.Artikel.Remove(Me)
				End If
				Me._Produkte.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Artikel.Add(Me)
					Me._pnr = value.pnr
				Else
					Me._pnr = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Produkte")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Lieferanten")>  _
Partial Public Class Lieferanten
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _lfnr As Integer
	
	Private _name As String
	
	Private _email As String
	
	Private _plz As String
	
	Private _Artikel As EntitySet(Of Artikel)
	
    #Region "Definitionen der Erweiterungsmethoden"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnlfnrChanging(value As Integer)
    End Sub
    Partial Private Sub OnlfnrChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnplzChanging(value As String)
    End Sub
    Partial Private Sub OnplzChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Artikel = New EntitySet(Of Artikel)(AddressOf Me.attach_Artikel, AddressOf Me.detach_Artikel)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lfnr", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property lfnr() As Integer
		Get
			Return Me._lfnr
		End Get
		Set
			If ((Me._lfnr = value)  _
						= false) Then
				Me.OnlfnrChanging(value)
				Me.SendPropertyChanging
				Me._lfnr = value
				Me.SendPropertyChanged("lfnr")
				Me.OnlfnrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(1000)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(1000)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plz", DbType:="NChar(5)")>  _
	Public Property plz() As String
		Get
			Return Me._plz
		End Get
		Set
			If (String.Equals(Me._plz, value) = false) Then
				Me.OnplzChanging(value)
				Me.SendPropertyChanging
				Me._plz = value
				Me.SendPropertyChanged("plz")
				Me.OnplzChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Lieferanten_Artikel", Storage:="_Artikel", ThisKey:="lfnr", OtherKey:="lfnr")>  _
	Public Property Artikel() As EntitySet(Of Artikel)
		Get
			Return Me._Artikel
		End Get
		Set
			Me._Artikel.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Artikel(ByVal entity As Artikel)
		Me.SendPropertyChanging
		entity.Lieferanten = Me
	End Sub
	
	Private Sub detach_Artikel(ByVal entity As Artikel)
		Me.SendPropertyChanging
		entity.Lieferanten = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Produkte")>  _
Partial Public Class Produkte
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _pnr As Integer
	
	Private _name As String
	
	Private _Artikel As EntitySet(Of Artikel)
	
    #Region "Definitionen der Erweiterungsmethoden"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpnrChanging(value As Integer)
    End Sub
    Partial Private Sub OnpnrChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Artikel = New EntitySet(Of Artikel)(AddressOf Me.attach_Artikel, AddressOf Me.detach_Artikel)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pnr", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property pnr() As Integer
		Get
			Return Me._pnr
		End Get
		Set
			If ((Me._pnr = value)  _
						= false) Then
				Me.OnpnrChanging(value)
				Me.SendPropertyChanging
				Me._pnr = value
				Me.SendPropertyChanged("pnr")
				Me.OnpnrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(1000)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Produkte_Artikel", Storage:="_Artikel", ThisKey:="pnr", OtherKey:="pnr")>  _
	Public Property Artikel() As EntitySet(Of Artikel)
		Get
			Return Me._Artikel
		End Get
		Set
			Me._Artikel.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Artikel(ByVal entity As Artikel)
		Me.SendPropertyChanging
		entity.Produkte = Me
	End Sub
	
	Private Sub detach_Artikel(ByVal entity As Artikel)
		Me.SendPropertyChanging
		entity.Produkte = Nothing
	End Sub
End Class
